<% layout('layout/boilerplate') %>
<title>Edit Campgrounds</title>

<div class="container mt-5">
    <div class="card shadow-lg p-4 rounded-4">
        <h2 class="text-center mb-4">Edit Campground</h2>
        
        <form action="/campgrounds/<%= campground._id %>?_method=PUT" method="post" novalidate class="validated-form needs-validation" enctype="multipart/form-data">
            
            <div class="mb-3">
                <label for="title" class="form-label fw-bold">Title</label>
                <input type="text" class="form-control" id="title" name="campground[title]" required value="<%= campground.title %>">
                <div class="invalid-feedback">Please enter a Title.</div>
            </div>

            <div class="mb-3">
                <label for="location" class="form-label fw-bold">Location</label>
                <input type="text" class="form-control" id="location" name="campground[location]" required value="<%= campground.location %>">
                <div class="invalid-feedback">Please enter a Location.</div>
            </div>

            <!-- Map Display -->
            <div class="mb-3">
                <label for="locationMap" class="form-label fw-bold">Location Map</label>
                <div id="locationMap" class="border rounded bg-light" style="height: 400px;"></div>
            </div>

            <!-- File Upload -->
            <div class="mb-3">
                <label class="form-label fw-bold">Upload Images</label>
                <div id="dropzone" class="border p-3 text-center rounded bg-light">
                    <p class="mb-2">Drag & Drop files here or click to select</p>
                    <input type="file" id="imageUpload" name="images" multiple class="form-control d-none">
                    <button type="button" class="btn btn-secondary btn-sm" onclick="document.getElementById('imageUpload').click()">Choose Files</button>
                </div>
                <div id="preview" class="mt-3 d-flex flex-wrap"></div>
                <div class="invalid-feedback">Please upload at least one image.</div>
            </div>

            <!-- Description -->
            <div class="mb-3">
                <label for="description" class="form-label fw-bold">Description</label>
                <textarea class="form-control" id="description" name="campground[description]" required><%= campground.description %></textarea>
                <div class="invalid-feedback">Please enter a Description.</div>
            </div>

            <!-- Price -->
            <div class="mb-3">
                <label for="price" class="form-label fw-bold">Campground Price</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input type="number" id="price" class="form-control" name="campground[price]" required placeholder="0.00" value="<%= campground.price %>">
                    <div class="invalid-feedback">Please enter a valid price.</div>
                </div>
            </div>

            <!-- Existing Images -->
            <div class="mb-3">
                <% campground.images.forEach(function(img, i) { %>
                    <div class="d-inline-block position-relative me-2">
                        <img src="<%= img.thumbnail %>" class="img-thumbnail rounded" alt="Campground Image">
                        <div class="form-check position-absolute top-0 end-0 bg-white p-1 rounded">
                            <input type="checkbox" id="image-<%= i %>" name="deleteImages[]" value="<%= img.filename %>">
                            <label for="image-<%= i %>" class="small">Delete?</label>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Buttons -->
            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary btn-lg">Update</button>
                <a href="/campgrounds/<%= campground._id %>" class="btn btn-outline-secondary btn-lg">Back to Details</a>
            </div>

        </form>
    </div>
</div>

<script>
    // Bootstrap validation
    (function () {
        'use strict';
        var forms = document.querySelectorAll('.needs-validation');
        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });
    })();

    // File Upload Preview
    document.getElementById("imageUpload").addEventListener("change", function (event) {
        const preview = document.getElementById("preview");
        preview.innerHTML = "";
        const maxFileSize = 10 * 1024 * 1024; // 10MB limit

        Array.from(event.target.files).forEach(file => {
            if (file.size > maxFileSize) {
                alert("File size exceeds 10MB: " + file.name);
                return;
            }

            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement("img");
                img.src = e.target.result;
                img.className = "m-1 rounded border";
                img.style.width = "100px";
                img.style.height = "100px";
                preview.appendChild(img);
            };
            reader.readAsDataURL(file);
        });
    });

    // Drag & Drop File Upload
    const dropzone = document.getElementById("dropzone");
    dropzone.addEventListener("dragover", function (event) {
        event.preventDefault();
        dropzone.classList.add("border-primary");
    });

    dropzone.addEventListener("dragleave", function () {
        dropzone.classList.remove("border-primary");
    });

    dropzone.addEventListener("drop", function (event) {
        event.preventDefault();
        dropzone.classList.remove("border-primary");
        document.getElementById("imageUpload").files = event.dataTransfer.files;
        document.getElementById("imageUpload").dispatchEvent(new Event("change"));
    });

    // MapTiler API Integration
    (function () {
        'use strict';
        const apiKey = '<%= MAPTILER_KEY %>';
        const location = "<%= campground.location %>";

        document.addEventListener("DOMContentLoaded", function () {
            function initializeMap(lng, lat) {
                const map = new maplibregl.Map({
                    container: 'locationMap',
                    style: `https://api.maptiler.com/maps/streets/style.json?key=${apiKey}`,
                    center: [lng, lat],
                    zoom: 12,
                });

                const marker = new maplibregl.Marker().setLngLat([lng, lat]).addTo(map);

                map.on('click', function (event) {
                    const clickedLng = event.lngLat.lng;
                    const clickedLat = event.lngLat.lat;
                    marker.setLngLat([clickedLng, clickedLat]);
                    document.getElementById('location').value = `${clickedLat}, ${clickedLng}`;
                });
            }

            fetch(`https://api.maptiler.com/geocoding/${encodeURIComponent(location)}.json?key=${apiKey}`)
                .then(response => response.json())
                .then(data => {
                    if (data.features.length > 0) {
                        const coords = data.features[0].geometry.coordinates;
                        initializeMap(coords[0], coords[1]);
                    }
                });
        });
    })();
</script>
